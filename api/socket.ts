import { Server } from "socket.io";
import Message from "./models/Message";

let io: Server; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Socket.IO —Å–µ—Ä–≤–µ—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞
export function initSocket(server: any) {
    io = new Server(server, {
        cors: { origin: "*" } // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ WebSocket —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    io.on("connection", (socket) => {
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ userId
        socket.on("joinRoom", (userId) => {
            socket.join(userId);
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–æ—à–µ–ª –≤ —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É`);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        socket.on("sendMessage", async ({ sender, receiver, text }) => {
            try {
                const message = new Message({ sender, receiver, text });
                await message.save();

                io.to(receiver).emit("receiveMessage", message);
                io.to(sender).emit("receiveMessage", message);

                console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${sender} –∫ ${receiver}`);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            }
        });
    });

    return io;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ io (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
export function getIo() {
    if (!io) {
        throw new Error("Socket.io –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    return io;
}
